/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,7],$V2=[1,6],$V3=[1,5,9,16],$V4=[1,20],$V5=[1,22],$V6=[1,23],$V7=[1,24],$V8=[1,25],$V9=[1,26],$Va=[13,24,89,90,91,92,93],$Vb=[7,31,40],$Vc=[2,53],$Vd=[1,51],$Ve=[1,45],$Vf=[1,43],$Vg=[1,44],$Vh=[1,47],$Vi=[1,48],$Vj=[1,49],$Vk=[1,50],$Vl=[1,52],$Vm=[1,55],$Vn=[1,59],$Vo=[1,60],$Vp=[1,61],$Vq=[1,62],$Vr=[1,63],$Vs=[1,64],$Vt=[1,65],$Vu=[1,66],$Vv=[1,67],$Vw=[1,68],$Vx=[1,69],$Vy=[1,70],$Vz=[1,71],$VA=[1,72],$VB=[1,73],$VC=[1,74],$VD=[7,26,31,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,84],$VE=[1,78],$VF=[7,26,31,84],$VG=[1,114],$VH=[2,49],$VI=[1,115],$VJ=[1,116],$VK=[1,117],$VL=[1,118],$VM=[1,120],$VN=[1,119],$VO=[26,31],$VP=[13,21],$VQ=[10,13,21,65,70,72,74,75,81,83,87,88,89,90,91,92,93,98],$VR=[1,143],$VS=[2,26],$VT=[1,155],$VU=[13,21,88,98],$VV=[10,13,21,65,70,72,74,75,81,89,90,91,92,93],$VW=[21,88,98],$VX=[2,126],$VY=[1,186],$VZ=[1,184],$V_=[1,185],$V$=[10,13,21,65,70,72,74,75,81,88,89,90,91,92,93,98],$V01=[2,22],$V11=[1,206],$V21=[13,21,88],$V31=[2,103],$V41=[1,216],$V51=[21,88],$V61=[13,83,87],$V71=[2,121],$V81=[1,225],$V91=[1,224],$Va1=[2,95],$Vb1=[2,84],$Vc1=[1,237],$Vd1=[10,13,21,65,70,72,74,75,81,83,87,88,89,90,91,92,93],$Ve1=[13,21,83,87,88];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"inicio":4,"EOF":5,"imports":6,"PTCOMA":7,"clases":8,"RCLASS":9,"IDENTIFICADOR":10,"LLAVIZQ":11,"cuerpo":12,"LLAVDER":13,"metodos":14,"declaracion":15,"RIMPORT":16,"tipos":17,"PARIZQ":18,"metodosp":19,"instrucciones":20,"RRETURN":21,"expresion":22,"tipado":23,"RVOID":24,"RMAIN":25,"PARDER":26,"void":27,"returnp":28,"return":29,"listaparametos":30,"COMA":31,"asignacion":32,"if":33,"while":34,"for":35,"dowhile":36,"switch":37,"llamarmetodos":38,"imprimir":39,"IGUAL":40,"declaracionp":41,"declaracionpp":42,"MAS":43,"MENOS":44,"POR":45,"DIVIDIDO":46,"NOIG":47,"MAYQUE":48,"MAYIGQUE":49,"MENIGQUE":50,"MENQUE":51,"AND":52,"OR":53,"POTENCIA":54,"MODULO":55,"DOBLEIG":56,"NOT":57,"INCREMENTO":58,"DECREMENTO":59,"NUMERO":60,"DECIMAL":61,"CADENA":62,"BOOLEANO":63,"CHAR":64,"RIF":65,"break":66,"elseif":67,"RELSE":68,"elseifp":69,"RWHILE":70,"bucle":71,"RFOR":72,"fordec":73,"RDO":74,"RSYSTEM":75,"PUNTO":76,"ROUT":77,"RPRINT":78,"imprimirp":79,"RPRINTLN":80,"RSWITCH":81,"case":82,"RCASE":83,"DOSPTS":84,"casep":85,"default":86,"RDEFAULT":87,"RBREAK":88,"RINT":89,"RBOOLEAN":90,"RSTRING":91,"RCHAR":92,"RDOUBLE":93,"llamarmetodosp":94,"llamarlistaparametros":95,"ciclo":96,"breakp":97,"RCONTINUE":98,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"PTCOMA",9:"RCLASS",10:"IDENTIFICADOR",11:"LLAVIZQ",13:"LLAVDER",16:"RIMPORT",18:"PARIZQ",21:"RRETURN",24:"RVOID",25:"RMAIN",26:"PARDER",31:"COMA",40:"IGUAL",43:"MAS",44:"MENOS",45:"POR",46:"DIVIDIDO",47:"NOIG",48:"MAYQUE",49:"MAYIGQUE",50:"MENIGQUE",51:"MENQUE",52:"AND",53:"OR",54:"POTENCIA",55:"MODULO",56:"DOBLEIG",57:"NOT",58:"INCREMENTO",59:"DECREMENTO",60:"NUMERO",61:"DECIMAL",62:"CADENA",63:"BOOLEANO",64:"CHAR",65:"RIF",68:"RELSE",70:"RWHILE",72:"RFOR",74:"RDO",75:"RSYSTEM",76:"PUNTO",77:"ROUT",78:"RPRINT",80:"RPRINTLN",81:"RSWITCH",83:"RCASE",84:"DOSPTS",87:"RDEFAULT",88:"RBREAK",89:"RINT",90:"RBOOLEAN",91:"RSTRING",92:"RCHAR",93:"RDOUBLE",98:"RCONTINUE"},
productions_: [0,[3,2],[3,1],[4,3],[4,2],[4,2],[4,1],[4,1],[4,0],[8,5],[12,2],[12,3],[12,1],[12,2],[12,0],[6,2],[14,11],[14,7],[14,7],[23,3],[23,2],[28,3],[28,0],[27,3],[27,2],[29,2],[29,0],[19,2],[19,1],[30,4],[30,2],[20,3],[20,3],[20,2],[20,2],[20,2],[20,3],[20,2],[20,3],[20,3],[20,2],[20,2],[20,1],[20,1],[20,1],[20,2],[20,1],[20,2],[20,2],[20,0],[32,3],[15,2],[41,3],[41,2],[42,2],[42,0],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,2],[22,2],[22,2],[22,2],[22,3],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[33,8],[67,2],[67,0],[69,8],[69,3],[34,7],[35,11],[73,1],[73,1],[36,8],[39,8],[39,8],[79,1],[79,0],[37,7],[82,6],[82,1],[85,5],[85,4],[85,0],[86,5],[86,0],[17,1],[17,1],[17,1],[17,1],[17,1],[38,3],[94,2],[94,1],[95,3],[95,1],[71,3],[71,2],[66,3],[66,2],[97,2],[97,2],[97,3],[97,0],[96,2],[96,2],[96,2],[96,3],[96,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1]
break;
case 2:
return $$[$0]
break;
case 3:
this.$=estructuras.encabezadoInicio($$[$0-2],$$[$0-1],1)
break;
case 4:
this.$=estructuras.encabezadoInicio($$[$0-1],$$[$0],2)
break;
case 5:
this.$=estructuras.nuevoInicio($$[$0-1],1)
break;
case 6:
this.$=estructuras.nuevoInicio($$[$0],2)
break;
case 7:

								//console.log("Se encontro: "+$$[$0]);
								//registrarSintactico.nuevoError(_$[$0].first_line,_$[$0].first_column,yy.parser.hash.expected,$$[$0]); 
							
break;
case 9:
this.$=estructuras.nuevoClase($$[$0-3],$$[$0-1])
break;
case 10:
this.$=estructuras.encabezadoCuerpo($$[$0-1],$$[$0],1)
break;
case 11:
this.$=estructuras.encabezadoCuerpo($$[$0-2],$$[$0-1],2)
break;
case 12:
this.$=estructuras.nuevoCuerpo($$[$0],1)
break;
case 13:
this.$=estructuras.nuevoCuerpo($$[$0-1],2)
break;
case 15:
this.$=estructuras.nuevoImport($$[$0])
break;
case 16:
this.$=estructuras.nuevoMetodoTipo($$[$0-10],$$[$0-9],$$[$0-7],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-1])
break;
case 17:
this.$=estructuras.nuevoMetodoMain($$[$0-1])
break;
case 18:
this.$=estructuras.nuevoMetodoVoid($$[$0-5],$$[$0-3],$$[$0-1])
break;
case 19:
this.$=estructuras.encabezadoTipado($$[$0-2],$$[$0-1],$$[$0])
break;
case 20:
this.$=estructuras.nuevoTipado($$[$0-1],$$[$0])
break;
case 21:
this.$=estructuras.nuevoReturnP($$[$0-1])
break;
case 23:
this.$=estructuras.encabezadoVoid($$[$0-2],$$[$0-1],$$[$0])
break;
case 24:
this.$=estructuras.nuevoVoid($$[$0-1],$$[$0])
break;
case 25:
this.$=estructuras.nuevoReturn()
break;
case 27:
this.$=estructuras.encabezadoMetodos($$[$0-1])
break;
case 28:
this.$=estructuras.nuevoMetodosP()
break;
case 29:
this.$=estructuras.encabezadoListaParametros($$[$0-3],$$[$0-1],$$[$0])
break;
case 30:
this.$=estructuras.nuevoListaParametros($$[$0-1],$$[$0])
break;
case 31:
this.$=estructuras.encabezadoInstrucciones($$[$0-2],$$[$0-1],1)
break;
case 32:
this.$=estructuras.encabezadoInstrucciones($$[$0-2],$$[$0-1],2)
break;
case 33:
this.$=estructuras.encabezadoInstrucciones($$[$0-1],$$[$0],3)
break;
case 34:
this.$=estructuras.encabezadoInstrucciones($$[$0-1],$$[$0],4)
break;
case 35:
this.$=estructuras.encabezadoInstrucciones($$[$0-1],$$[$0],5)
break;
case 36:
this.$=estructuras.encabezadoInstrucciones($$[$0-2],$$[$0-1],6)
break;
case 37:
this.$=estructuras.encabezadoInstrucciones($$[$0-1],$$[$0],7)
break;
case 38:
this.$=estructuras.encabezadoInstrucciones($$[$0-2],$$[$0-1],8)
break;
case 39:
this.$=estructuras.encabezadoInstrucciones($$[$0-2],$$[$0-1],9)
break;
case 40:
this.$=estructuras.nuevoInstrucciones($$[$0-1],1)
break;
case 41:
this.$=estructuras.nuevoInstrucciones($$[$0-1],2)
break;
case 42:
this.$=estructuras.nuevoInstrucciones($$[$0],3)
break;
case 43:
this.$=estructuras.nuevoInstrucciones($$[$0],4)
break;
case 44:
this.$=estructuras.nuevoInstrucciones($$[$0],5)
break;
case 45:
this.$=estructuras.nuevoInstrucciones($$[$0-1],6)
break;
case 46:
this.$=estructuras.nuevoInstrucciones($$[$0],7)
break;
case 47:
this.$=estructuras.nuevoInstrucciones($$[$0-1],8)
break;
case 48:
this.$=estructuras.nuevoInstrucciones($$[$0-1],9)
break;
case 50:
this.$=estructuras.nuevoAsignacion($$[$0-2],$$[$0])
break;
case 51:
this.$=estructuras.nuevoDeclaracion($$[$0-1],$$[$0])
break;
case 52:
this.$=estructuras.encabezadoDeclaracionP($$[$0-2],$$[$0])
break;
case 53:
this.$=estructuras.nuevoDeclaracionP($$[$0-1],$$[$0])
break;
case 54:
this.$=estructuras.nuevoDeclaracionPP($$[$0])
break;
case 56: case 57: case 58: case 59: case 60: case 61: case 62: case 63: case 64: case 65: case 66: case 67: case 68: case 69:
this.$=estructuras.nuevoBinario($$[$0-2],$$[$0-1],$$[$0])
break;
case 70: case 71:
this.$=estructuras.nuevoUnario($$[$0-1],$$[$0])
break;
case 72: case 73:
this.$=estructuras.nuevoUnario($$[$0],$$[$0-1])
break;
case 74:
this.$=estructuras.nuevoParentesis($$[$0-1])
break;
case 75:
this.$=estructuras.nuevoLlamarMetodos($$[$0])
break;
case 76:
this.$=estructuras.nuevoDato($$[$0],1)
break;
case 77:
this.$=estructuras.nuevoDato($$[$0],2)
break;
case 78:
this.$=estructuras.nuevoDato($$[$0],3)
break;
case 79:
this.$=estructuras.nuevoDato($$[$0],4)
break;
case 80:
this.$=estructuras.nuevoDato($$[$0],5)
break;
case 81:
this.$=estructuras.nuevoDato($$[$0],6)
break;
case 82:
this.$=estructuras.nuevoIf($$[$0-5],$$[$0-2],$$[$0])
break;
case 83:
this.$=estructuras.nuevoElseIf($$[$0])
break;
case 85:
this.$=estructuras.nuevoElseIf($$[$0-5],$$[$0-2],$$[$0])
break;
case 86:
this.$=estructuras.nuevoElseIf($$[$0-1])
break;
case 87:
this.$=estructuras.nuevoWhile($$[$0-4],$$[$0-1])
break;
case 88:
this.$=estructuras.nuevoFor($$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1])
break;
case 89:
this.$=estructuras.nuevoDeclaracion($$[$0])
break;
case 90:
this.$=estructuras.nuevoAsignacion($$[$0])
break;
case 91:
this.$=estructuras.nuevoDoWhile($$[$0-5],$$[$0-1])
break;
case 92:
this.$=estructuras.nuevoImprimir($$[$0-1])
break;
case 93:
this.$=estructuras.nuevoImprimirLn($$[$0-1])
break;
case 94:
this.$=estructuras.nuevoImprimirP($$[$0])
break;
case 96:
this.$=estructuras.nuevoSwitch($$[$0-4],$$[$0-1])
break;
case 97:
this.$=estructuras.nuevoCase($$[$0-4],$$[$0-2],$$[$0-1],$$[$0])
break;
case 98:
this.$=estructuras.nuevoCase($$[$0])
break;
case 99:
this.$=estructuras.nuevoCaseP($$[$0-4],$$[$0-3],$$[$0])
break;
case 100:
this.$=estructuras.nuevoCaseP($$[$0-2],$$[$0])
break;
case 102:
this.$=estructuras.nuevoDefault($$[$0-2])
break;
case 104: case 105: case 106: case 107: case 108:
this.$=estructuras.nuevoTipos($$[$0])
break;
case 109:
$=estructuras.nuevoLlamarMetodos($$[$0-2],$$[$0])
break;
case 110:
$=estructuras.nuevoLlamarMetodosP($$[$0-1])
break;
case 111:
$=estructuras.nuevoLlamarMetodosP()
break;
case 112:
$=estructuras.nuevoLlamarListaParametros($$[$0-2],$$[$0])
break;
case 113:
$=estructuras.nuevoLlamarListaParametros($$[$0])
break;
case 114:
this.$=estructuras.encabezadoBucle($$[$0-2],$$[$0-1],$$[$0])
break;
case 115:
this.$=estructuras.nuevoBucle($$[$0-1],$$[$0])
break;
case 116:
this.$=estructuras.encabezadoBreak($$[$0-2],$$[$0-1],$$[$0])
break;
case 117:
this.$=estructuras.nuevoBreak($$[$0-1],$$[$0])
break;
case 118:
this.$=estructuras.nuevoBreakP()
break;
case 119:
this.$=estructuras.nuevoBreakP($$[$0-1],0)
break;
case 120:
this.$=estructuras.nuevoBreakP($$[$0-1],1)
break;
case 122:
this.$=estructuras.nuevoCiclo(1)
break;
case 123:
this.$=estructuras.nuevoCiclo(2)
break;
case 124:
this.$=estructuras.nuevoCiclo(3)
break;
case 125:
this.$=estructuras.nuevoCiclo($$[$0-1],0)
break;
}
},
table: [o($V0,[2,8],{3:1,4:2,6:3,8:4,2:$V0,9:$V1,16:$V2}),{1:[3]},{1:[2,2],5:[1,8],6:9,8:10,9:$V1,16:$V2},{7:[1,11]},o($V3,[2,6]),o($V3,[2,7]),{10:[1,12]},{10:[1,13]},{1:[2,1]},{7:[1,14]},o($V3,[2,4]),o($V3,[2,5]),{7:[2,15]},{11:[1,15]},o($V3,[2,3]),{12:16,13:[2,14],14:17,15:18,17:19,24:$V4,41:21,89:$V5,90:$V6,91:$V7,92:$V8,93:$V9},{13:[1,27],14:28,15:29,17:19,24:$V4,41:21,89:$V5,90:$V6,91:$V7,92:$V8,93:$V9},o($Va,[2,12]),{7:[1,30]},{10:[1,31]},{10:[1,33],25:[1,32]},{7:[2,55],31:[1,35],40:[1,36],42:34},{10:[2,104]},{10:[2,105]},{10:[2,106]},{10:[2,107]},{10:[2,108]},o($V3,[2,9]),o($Va,[2,10]),{7:[1,37]},o($Va,[2,13]),o($Vb,$Vc,{18:[1,38]}),{18:[1,39]},{18:[1,40]},{7:[2,51]},{10:[1,41]},{10:$Vd,18:$Ve,22:42,38:46,44:$Vf,57:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl},o($Va,[2,11]),{17:56,19:53,26:$Vm,30:54,89:$V5,90:$V6,91:$V7,92:$V8,93:$V9},{26:[1,57]},{17:56,19:58,26:$Vm,30:54,89:$V5,90:$V6,91:$V7,92:$V8,93:$V9},o($Vb,[2,52]),{7:[2,54],43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,58:$VB,59:$VC},{10:$Vd,18:$Ve,22:75,38:46,44:$Vf,57:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl},{10:$Vd,18:$Ve,22:76,38:46,44:$Vf,57:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl},{10:$Vd,18:$Ve,22:77,38:46,44:$Vf,57:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl},o($VD,[2,75]),o($VD,[2,76]),o($VD,[2,77]),o($VD,[2,78]),o($VD,[2,79]),o($VD,[2,80],{18:$VE}),o($VD,[2,81]),{11:[1,79]},{26:[1,80],31:[1,81]},{11:[2,28]},{10:[1,82]},{11:[1,83]},{11:[1,84]},{10:$Vd,18:$Ve,22:85,38:46,44:$Vf,57:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl},{10:$Vd,18:$Ve,22:86,38:46,44:$Vf,57:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl},{10:$Vd,18:$Ve,22:87,38:46,44:$Vf,57:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl},{10:$Vd,18:$Ve,22:88,38:46,44:$Vf,57:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl},{10:$Vd,18:$Ve,22:89,38:46,44:$Vf,57:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl},{10:$Vd,18:$Ve,22:90,38:46,44:$Vf,57:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl},{10:$Vd,18:$Ve,22:91,38:46,44:$Vf,57:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl},{10:$Vd,18:$Ve,22:92,38:46,44:$Vf,57:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl},{10:$Vd,18:$Ve,22:93,38:46,44:$Vf,57:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl},{10:$Vd,18:$Ve,22:94,38:46,44:$Vf,57:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl},{10:$Vd,18:$Ve,22:95,38:46,44:$Vf,57:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl},{10:$Vd,18:$Ve,22:96,38:46,44:$Vf,57:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl},{10:$Vd,18:$Ve,22:97,38:46,44:$Vf,57:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl},{10:$Vd,18:$Ve,22:98,38:46,44:$Vf,57:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl},o($VD,[2,72]),o($VD,[2,73]),o($VF,[2,70],{43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,58:$VB,59:$VC}),o($VF,[2,71],{43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,58:$VB,59:$VC}),{26:[1,99],43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,58:$VB,59:$VC},{10:$Vd,18:$Ve,22:103,26:[1,102],38:46,44:$Vf,57:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl,94:100,95:101},{10:$VG,15:106,17:121,20:104,21:$VH,32:105,33:107,34:108,35:109,36:110,37:111,38:112,39:113,41:21,65:$VI,70:$VJ,72:$VK,74:$VL,75:$VM,81:$VN,89:$V5,90:$V6,91:$V7,92:$V8,93:$V9},{11:[2,27]},{17:122,89:$V5,90:$V6,91:$V7,92:$V8,93:$V9},o($VO,[2,30]),o($VP,$VH,{41:21,32:105,15:106,33:107,34:108,35:109,36:110,37:111,38:112,39:113,17:121,27:123,20:124,10:$VG,65:$VI,70:$VJ,72:$VK,74:$VL,75:$VM,81:$VN,89:$V5,90:$V6,91:$V7,92:$V8,93:$V9}),o($VP,$VH,{41:21,32:105,15:106,33:107,34:108,35:109,36:110,37:111,38:112,39:113,17:121,20:124,27:125,10:$VG,65:$VI,70:$VJ,72:$VK,74:$VL,75:$VM,81:$VN,89:$V5,90:$V6,91:$V7,92:$V8,93:$V9}),o($VF,[2,56],{43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,58:$VB,59:$VC}),o($VF,[2,57],{43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,58:$VB,59:$VC}),o($VF,[2,58],{43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,58:$VB,59:$VC}),o($VF,[2,59],{43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,58:$VB,59:$VC}),o($VF,[2,60],{43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,58:$VB,59:$VC}),o($VF,[2,61],{43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,58:$VB,59:$VC}),o($VF,[2,62],{43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,58:$VB,59:$VC}),o($VF,[2,63],{43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,58:$VB,59:$VC}),o($VF,[2,64],{43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,58:$VB,59:$VC}),o($VF,[2,65],{43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,58:$VB,59:$VC}),o($VF,[2,66],{43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,58:$VB,59:$VC}),o($VF,[2,67],{43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,58:$VB,59:$VC}),o($VF,[2,68],{43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,58:$VB,59:$VC}),o($VF,[2,69],{43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,58:$VB,59:$VC}),o($VD,[2,74]),o($VD,[2,109]),{26:[1,126],31:[1,127]},o($VD,[2,111]),o($VO,[2,113],{43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,58:$VB,59:$VC}),{10:$VG,15:130,17:121,21:[1,128],32:129,33:131,34:132,35:133,36:134,37:135,38:136,39:137,41:21,65:$VI,70:$VJ,72:$VK,74:$VL,75:$VM,81:$VN,89:$V5,90:$V6,91:$V7,92:$V8,93:$V9},{7:[1,138]},{7:[1,139]},o($VQ,[2,42]),o($VQ,[2,43]),o($VQ,[2,44]),{7:[1,140]},o($VQ,[2,46]),{7:[1,141]},{7:[1,142]},{18:$VE,40:$VR},{18:[1,144]},{18:[1,145]},{18:[1,146]},{11:[1,147]},{18:[1,148]},{76:[1,149]},{10:[1,150]},{10:[1,151]},{10:$VG,13:[1,152],15:106,17:121,20:153,21:$VH,32:105,33:107,34:108,35:109,36:110,37:111,38:112,39:113,41:21,65:$VI,70:$VJ,72:$VK,74:$VL,75:$VM,81:$VN,89:$V5,90:$V6,91:$V7,92:$V8,93:$V9},{10:$VG,13:$VS,15:130,17:121,21:$VT,29:154,32:129,33:131,34:132,35:133,36:134,37:135,38:136,39:137,41:21,65:$VI,70:$VJ,72:$VK,74:$VL,75:$VM,81:$VN,89:$V5,90:$V6,91:$V7,92:$V8,93:$V9},{10:$VG,13:[1,156],15:106,17:121,20:153,21:$VH,32:105,33:107,34:108,35:109,36:110,37:111,38:112,39:113,41:21,65:$VI,70:$VJ,72:$VK,74:$VL,75:$VM,81:$VN,89:$V5,90:$V6,91:$V7,92:$V8,93:$V9},o($VD,[2,110]),{10:$Vd,18:$Ve,22:157,38:46,44:$Vf,57:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl},{10:$Vd,18:$Ve,22:158,38:46,44:$Vf,57:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl},{7:[1,159]},{7:[1,160]},o($VQ,[2,33]),o($VQ,[2,34]),o($VQ,[2,35]),{7:[1,161]},o($VQ,[2,37]),{7:[1,162]},{7:[1,163]},o($VQ,[2,40]),o($VQ,[2,41]),o($VQ,[2,45]),o($VQ,[2,47]),o($VQ,[2,48]),{10:$Vd,18:$Ve,22:164,38:46,44:$Vf,57:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl},{10:$Vd,18:$Ve,22:165,38:46,44:$Vf,57:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl},{10:$Vd,18:$Ve,22:166,38:46,44:$Vf,57:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl},{10:[1,170],15:168,17:121,32:169,41:21,73:167,89:$V5,90:$V6,91:$V7,92:$V8,93:$V9},o($VU,$VH,{41:21,32:105,15:106,33:107,34:108,35:109,36:110,37:111,38:112,39:113,17:121,71:171,20:172,10:$VG,65:$VI,70:$VJ,72:$VK,74:$VL,75:$VM,81:$VN,89:$V5,90:$V6,91:$V7,92:$V8,93:$V9}),{10:$Vd,18:$Ve,22:173,38:46,44:$Vf,57:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl},{77:[1,174]},o($Vb,$Vc),o($VO,[2,29]),o($Va,[2,17]),{10:$VG,13:$VS,15:130,17:121,21:$VT,29:175,32:129,33:131,34:132,35:133,36:134,37:135,38:136,39:137,41:21,65:$VI,70:$VJ,72:$VK,74:$VL,75:$VM,81:$VN,89:$V5,90:$V6,91:$V7,92:$V8,93:$V9},o($VV,[2,24]),{7:[1,176]},o($Va,[2,18]),o($VO,[2,112],{43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,58:$VB,59:$VC}),{7:[1,177],43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,58:$VB,59:$VC},o($VQ,[2,31]),o($VQ,[2,32]),o($VQ,[2,36]),o($VQ,[2,38]),o($VQ,[2,39]),{7:[2,50],43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,58:$VB,59:$VC},{26:[1,178],43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,58:$VB,59:$VC},{26:[1,179],43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,58:$VB,59:$VC},{7:[1,180]},{7:[2,89]},{7:[2,90]},{40:$VR},o($VW,$VH,{41:21,32:105,15:106,33:107,34:108,35:109,36:110,37:111,38:112,39:113,17:121,20:182,10:$VG,13:[1,181],65:$VI,70:$VJ,72:$VK,74:$VL,75:$VM,81:$VN,89:$V5,90:$V6,91:$V7,92:$V8,93:$V9}),{10:$VG,13:$VX,15:130,17:121,21:$VY,32:129,33:131,34:132,35:133,36:134,37:135,38:136,39:137,41:21,65:$VI,70:$VJ,72:$VK,74:$VL,75:$VM,81:$VN,88:$VZ,89:$V5,90:$V6,91:$V7,92:$V8,93:$V9,96:183,98:$V_},{26:[1,187],43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,58:$VB,59:$VC},{76:[1,188]},o($VV,[2,23]),o($VV,[2,25]),o($VP,$VH,{41:21,32:105,15:106,33:107,34:108,35:109,36:110,37:111,38:112,39:113,17:121,23:189,20:190,10:$VG,65:$VI,70:$VJ,72:$VK,74:$VL,75:$VM,81:$VN,89:$V5,90:$V6,91:$V7,92:$V8,93:$V9}),{11:[1,191]},{11:[1,192]},{10:$Vd,18:$Ve,22:193,38:46,44:$Vf,57:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl},{70:[1,194]},{10:$VG,13:$VX,15:130,17:121,21:$VY,32:129,33:131,34:132,35:133,36:134,37:135,38:136,39:137,41:21,65:$VI,70:$VJ,72:$VK,74:$VL,75:$VM,81:$VN,88:$VZ,89:$V5,90:$V6,91:$V7,92:$V8,93:$V9,96:195,98:$V_},o($V$,[2,115]),{7:[1,196]},{7:[1,197]},{7:[1,198],10:$Vd,18:$Ve,22:199,38:46,44:$Vf,57:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl},{11:[1,200]},{78:[1,201],80:[1,202]},{10:$VG,13:[1,203],15:106,17:121,20:204,21:$VH,32:105,33:107,34:108,35:109,36:110,37:111,38:112,39:113,41:21,65:$VI,70:$VJ,72:$VK,74:$VL,75:$VM,81:$VN,89:$V5,90:$V6,91:$V7,92:$V8,93:$V9},{10:$VG,13:$V01,15:130,17:121,21:$V11,28:205,32:129,33:131,34:132,35:133,36:134,37:135,38:136,39:137,41:21,65:$VI,70:$VJ,72:$VK,74:$VL,75:$VM,81:$VN,89:$V5,90:$V6,91:$V7,92:$V8,93:$V9},o($V21,$VH,{41:21,32:105,15:106,33:107,34:108,35:109,36:110,37:111,38:112,39:113,17:121,66:207,20:208,10:$VG,65:$VI,70:$VJ,72:$VK,74:$VL,75:$VM,81:$VN,89:$V5,90:$V6,91:$V7,92:$V8,93:$V9}),o($VU,$VH,{41:21,32:105,15:106,33:107,34:108,35:109,36:110,37:111,38:112,39:113,17:121,20:172,71:209,10:$VG,65:$VI,70:$VJ,72:$VK,74:$VL,75:$VM,81:$VN,89:$V5,90:$V6,91:$V7,92:$V8,93:$V9}),{7:[1,210],43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,58:$VB,59:$VC},{18:[1,211]},o($V$,[2,114]),o($V$,[2,122]),o($V$,[2,123]),o($V$,[2,124]),{7:[1,212],43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,58:$VB,59:$VC},{13:$V31,82:213,83:[1,214],86:215,87:$V41},{18:[1,217]},{18:[1,218]},o($Va,[2,16]),{10:$VG,13:$V01,15:130,17:121,21:$V11,28:219,32:129,33:131,34:132,35:133,36:134,37:135,38:136,39:137,41:21,65:$VI,70:$VJ,72:$VK,74:$VL,75:$VM,81:$VN,89:$V5,90:$V6,91:$V7,92:$V8,93:$V9},o($VV,[2,20]),{10:$Vd,18:$Ve,22:220,38:46,44:$Vf,57:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl},o($V51,$VH,{41:21,32:105,15:106,33:107,34:108,35:109,36:110,37:111,38:112,39:113,17:121,20:222,10:$VG,13:[1,221],65:$VI,70:$VJ,72:$VK,74:$VL,75:$VM,81:$VN,89:$V5,90:$V6,91:$V7,92:$V8,93:$V9}),o($V61,$V71,{41:21,17:121,32:129,15:130,33:131,34:132,35:133,36:134,37:135,38:136,39:137,97:223,10:$VG,21:$V81,65:$VI,70:$VJ,72:$VK,74:$VL,75:$VM,81:$VN,88:$V91,89:$V5,90:$V6,91:$V7,92:$V8,93:$V9}),o($VW,$VH,{41:21,32:105,15:106,33:107,34:108,35:109,36:110,37:111,38:112,39:113,17:121,20:182,10:$VG,13:[1,226],65:$VI,70:$VJ,72:$VK,74:$VL,75:$VM,81:$VN,89:$V5,90:$V6,91:$V7,92:$V8,93:$V9}),{10:$Vd,18:$Ve,22:227,38:46,44:$Vf,57:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl},{10:$Vd,18:$Ve,22:228,38:46,44:$Vf,57:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl},o($V$,[2,125]),{13:[1,229]},{10:$Vd,18:$Ve,22:230,38:46,44:$Vf,57:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl},{13:[2,98]},{84:[1,231]},{10:$Vd,18:$Ve,22:233,26:$Va1,38:46,44:$Vf,57:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl,79:232},{10:$Vd,18:$Ve,22:233,26:$Va1,38:46,44:$Vf,57:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl,79:234},o($VV,[2,19]),{7:[1,235],43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,58:$VB,59:$VC},o($VQ,$Vb1,{67:236,68:$Vc1}),o($V61,$V71,{41:21,17:121,32:129,15:130,33:131,34:132,35:133,36:134,37:135,38:136,39:137,97:238,10:$VG,21:$V81,65:$VI,70:$VJ,72:$VK,74:$VL,75:$VM,81:$VN,88:$V91,89:$V5,90:$V6,91:$V7,92:$V8,93:$V9}),o($Vd1,[2,117]),{7:[1,239]},{7:[1,240],10:$Vd,18:$Ve,22:241,38:46,44:$Vf,57:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl},o($VQ,[2,87]),{26:[1,242],43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,58:$VB,59:$VC},{26:[1,243],43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,58:$VB,59:$VC},o($VQ,[2,96]),{43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,58:$VB,59:$VC,84:[1,244]},{10:$VG,15:106,17:121,20:245,32:105,33:107,34:108,35:109,36:110,37:111,38:112,39:113,41:21,65:$VI,70:$VJ,72:$VK,74:$VL,75:$VM,81:$VN,88:$VH,89:$V5,90:$V6,91:$V7,92:$V8,93:$V9},{26:[1,246]},{26:[2,94],43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,58:$VB,59:$VC},{26:[1,247]},o($VV,[2,21]),o($VQ,[2,82]),{11:[1,250],65:[1,249],69:248},o($Vd1,[2,116]),o($Vd1,[2,118]),o($Vd1,[2,119]),{7:[1,251],43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,58:$VB,59:$VC},{11:[1,252]},{7:[2,91]},o($Ve1,$VH,{41:21,32:105,15:106,33:107,34:108,35:109,36:110,37:111,38:112,39:113,17:121,20:208,66:253,10:$VG,65:$VI,70:$VJ,72:$VK,74:$VL,75:$VM,81:$VN,89:$V5,90:$V6,91:$V7,92:$V8,93:$V9}),{10:$VG,15:130,17:121,32:129,33:131,34:132,35:133,36:134,37:135,38:136,39:137,41:21,65:$VI,70:$VJ,72:$VK,74:$VL,75:$VM,81:$VN,88:[1,254],89:$V5,90:$V6,91:$V7,92:$V8,93:$V9},{7:[2,92]},{7:[2,93]},o($VQ,[2,83]),{18:[1,255]},o($V21,$VH,{41:21,32:105,15:106,33:107,34:108,35:109,36:110,37:111,38:112,39:113,17:121,20:208,66:256,10:$VG,65:$VI,70:$VJ,72:$VK,74:$VL,75:$VM,81:$VN,89:$V5,90:$V6,91:$V7,92:$V8,93:$V9}),o($Vd1,[2,120]),o($VU,$VH,{41:21,32:105,15:106,33:107,34:108,35:109,36:110,37:111,38:112,39:113,17:121,20:172,71:257,10:$VG,65:$VI,70:$VJ,72:$VK,74:$VL,75:$VM,81:$VN,89:$V5,90:$V6,91:$V7,92:$V8,93:$V9}),o([13,21,87,88],[2,101],{41:21,32:105,15:106,33:107,34:108,35:109,36:110,37:111,38:112,39:113,17:121,20:222,85:258,10:$VG,65:$VI,70:$VJ,72:$VK,74:$VL,75:$VM,81:$VN,83:[1,259],89:$V5,90:$V6,91:$V7,92:$V8,93:$V9}),{7:[1,260]},{10:$Vd,18:$Ve,22:261,38:46,44:$Vf,57:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl},o($V51,$VH,{41:21,32:105,15:106,33:107,34:108,35:109,36:110,37:111,38:112,39:113,17:121,20:222,10:$VG,13:[1,262],65:$VI,70:$VJ,72:$VK,74:$VL,75:$VM,81:$VN,89:$V5,90:$V6,91:$V7,92:$V8,93:$V9}),o($VW,$VH,{41:21,32:105,15:106,33:107,34:108,35:109,36:110,37:111,38:112,39:113,17:121,20:182,10:$VG,13:[1,263],65:$VI,70:$VJ,72:$VK,74:$VL,75:$VM,81:$VN,89:$V5,90:$V6,91:$V7,92:$V8,93:$V9}),{13:$V31,83:[1,265],86:264,87:$V41},{10:$Vd,18:$Ve,22:266,38:46,44:$Vf,57:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl},{13:[2,102]},{26:[1,267],43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,58:$VB,59:$VC},o($VQ,[2,86]),o($VQ,[2,88]),{13:[2,97]},{10:$Vd,18:$Ve,22:268,38:46,44:$Vf,57:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl},{43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,58:$VB,59:$VC,84:[1,269]},{11:[1,270]},{43:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,58:$VB,59:$VC,84:[1,271]},o($Ve1,$VH,{41:21,32:105,15:106,33:107,34:108,35:109,36:110,37:111,38:112,39:113,17:121,20:208,66:272,10:$VG,65:$VI,70:$VJ,72:$VK,74:$VL,75:$VM,81:$VN,89:$V5,90:$V6,91:$V7,92:$V8,93:$V9}),o($V21,$VH,{41:21,32:105,15:106,33:107,34:108,35:109,36:110,37:111,38:112,39:113,17:121,20:208,66:273,10:$VG,65:$VI,70:$VJ,72:$VK,74:$VL,75:$VM,81:$VN,89:$V5,90:$V6,91:$V7,92:$V8,93:$V9}),o($Ve1,$VH,{41:21,32:105,15:106,33:107,34:108,35:109,36:110,37:111,38:112,39:113,17:121,20:208,66:274,10:$VG,65:$VI,70:$VJ,72:$VK,74:$VL,75:$VM,81:$VN,89:$V5,90:$V6,91:$V7,92:$V8,93:$V9}),o($V61,[2,100],{41:21,32:105,15:106,33:107,34:108,35:109,36:110,37:111,38:112,39:113,17:121,20:222,10:$VG,21:$VH,88:$VH,65:$VI,70:$VJ,72:$VK,74:$VL,75:$VM,81:$VN,89:$V5,90:$V6,91:$V7,92:$V8,93:$V9}),o($V51,$VH,{41:21,32:105,15:106,33:107,34:108,35:109,36:110,37:111,38:112,39:113,17:121,20:222,10:$VG,13:[1,275],65:$VI,70:$VJ,72:$VK,74:$VL,75:$VM,81:$VN,89:$V5,90:$V6,91:$V7,92:$V8,93:$V9}),o($V61,[2,99],{41:21,32:105,15:106,33:107,34:108,35:109,36:110,37:111,38:112,39:113,17:121,20:222,10:$VG,21:$VH,88:$VH,65:$VI,70:$VJ,72:$VK,74:$VL,75:$VM,81:$VN,89:$V5,90:$V6,91:$V7,92:$V8,93:$V9}),o($VQ,$Vb1,{67:276,68:$Vc1}),o($VQ,[2,85])],
defaultActions: {8:[2,1],12:[2,15],22:[2,104],23:[2,105],24:[2,106],25:[2,107],26:[2,108],34:[2,51],55:[2,28],80:[2,27],168:[2,89],169:[2,90],215:[2,98],243:[2,91],246:[2,92],247:[2,93],260:[2,102],264:[2,97]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    registrarSintactico.nuevoError(yylineno+1,0,expected.join(', '),lexer.match);
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const estructuras	= require('./instrucciones').estructuras;
	const registrarError	= require('./instrucciones').registrarError;
	const registrarSintactico	= require('./instrucciones').registrarSintactico;

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// ignora los espacios en blanco
break;
case 1:// comentario de linea
break;
case 2:// comentario de multiples lineas	
break;
case 3:return "RDO"
break;
case 4:return "RWHILE"
break;
case 5:return "RFOR"
break;
case 6:return "RINT"
break;
case 7:return "RDOUBLE"
break;
case 8:return "RBOOLEAN"
break;
case 9:return "RCHAR"
break;
case 10:return "RSTRING"
break;
case 11:return "RIMPORT"
break;
case 12:return "RCLASS"
break;
case 13:return "RCONTINUE"
break;
case 14:return "RVOID"
break;
case 15:return "RSYSTEM"
break;
case 16:return "ROUT"
break;
case 17:return "RPRINTLN"
break;
case 18:return "RMAIN"
break;
case 19:return "RPRINT"
break;
case 20:return "PUNTO"
break;
case 21:return "COMA"
break;
case 22:return "POTENCIA"
break;
case 23:return "MODULO"
break;
case 24:return "INCREMENTO"
break;
case 25:return "DECREMENTO"
break;
case 26:return "BOOLEANO"
break;
case 27:return "BOOLEANO"
break;
case 28:return "RRETURN"
break;
case 29:return 65;
break;
case 30:return 68;
break;
case 31:return 81;
break;
case 32:return 83;
break;
case 33:return 87;
break;
case 34:return 88;
break;
case 35:return 84;
break;
case 36:return 7;
break;
case 37:return 11;
break;
case 38:return 13;
break;
case 39:return 18;
break;
case 40:return 26;
break;
case 41:return 52
break;
case 42:return 53
break;
case 43:return 57
break;
case 44:return 43;
break;
case 45:return 44;
break;
case 46:return 45;
break;
case 47:return 46;
break;
case 48:return 50;
break;
case 49:return 49;
break;
case 50:return 56;
break;
case 51:return 47;
break;
case 52:return 51;
break;
case 53:return 48;
break;
case 54:return 40;
break;
case 55: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 62; 
break;
case 56: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 64; 
break;
case 57:return 61;
break;
case 58:return 'ENTERO';
break;
case 59:return 10;
break;
case 60:return 5;
break;
case 61: registrarError.nuevoError(yy_.yylloc.first_line,yy_.yylloc.first_column,yy_.yytext); 
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/,/^(?:do\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:import\b)/,/^(?:class\b)/,/^(?:continue\b)/,/^(?:void\b)/,/^(?:System\b)/,/^(?:out\b)/,/^(?:println\b)/,/^(?:main\b)/,/^(?:print\b)/,/^(?:\.)/,/^(?:,)/,/^(?:\^)/,/^(?:%)/,/^(?:\+\+)/,/^(?:--)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?::)/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:'([^\\\"]|\\.)')/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[0-9]+\b)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}